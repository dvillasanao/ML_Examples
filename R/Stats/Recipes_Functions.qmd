---
title: "Recipes functions"
subtitle: "Apuntes y anotaciones personales"
author: "Diana Villasana Ocampo"
format:
  html:
    code-fold: false
    highlight-style: tango
    theme: flatly
    toc: true
    toc-depth: 3
    toc-location: left
    css: style.css
execute:
  echo: true      
  message: false   # Suprimir mensajes generados por R/Python
  warning: false   # Suprimir advertencias generadas por R/Python
  error: false     # Suprimir errores (muestra la ejecuci√≥n, pero no los errores)
  execute-dir: project
editor: visual
---

La paqueter√≠a **`recipes`** es muy poderosa para realizar preprocesamiento **modular, reproducible y compatible con cualquier modelo**, especialmente dentro del ecosistema `tidymodels`.

## üß∞ 1. Creaci√≥n y preparaci√≥n de recetas

| Funci√≥n    | Descripci√≥n                                                            |
| ---------- | ---------------------------------------------------------------------- |
| `recipe()` | Crea una receta base: f√≥rmula + data.                                  |
| `step_*()` | A√±ade un paso de preprocesamiento a la receta.                         |
| `prep()`   | Ajusta (entrena) la receta con los datos.                              |
| `bake()`   | Aplica la receta a los datos (como `predict`).                         |
| `juice()`  | Extrae los datos transformados del `prep()` sin necesidad de `bake()`. |



## üõ†Ô∏è 2. Funciones comunes por tipo de preprocesamiento     

### üìè A. **Escalado y normalizaci√≥n**

| Funci√≥n            | Prop√≥sito                                     |
| ------------------ | --------------------------------------------- |
| `step_center()`    | Centrar variables (restar la media).          |
| `step_scale()`     | Escalar (dividir por la desviaci√≥n est√°ndar). |
| `step_normalize()` | Centrar y escalar en un solo paso.            |
| `step_range()`     | Escalado min-max (0 a 1).                     |

---

### üßº B. Tratamiento de datos faltantes

| Funci√≥n                                                            | Prop√≥sito                                    |
| ------------------------------------------------------------------ | -------------------------------------------- |
| `step_naomit()`                                                    | Elimina filas con `NA`.                      |
| `step_impute_mean()`, `step_impute_median()`, `step_impute_mode()` | Imputaci√≥n b√°sica por media, mediana o moda. |
| `step_impute_knn()`                                                | Imputaci√≥n por vecinos m√°s cercanos.         |



### üîç C. Transformaciones    

| Funci√≥n                     | Prop√≥sito                                                 |
| --------------------------- | --------------------------------------------------------- |
| `step_log()`                | Aplica logaritmo (natural).                               |
| `step_BoxCox()`             | Aplica transformaci√≥n Box-Cox.                            |
| `step_YeoJohnson()`         | Alternativa a Box-Cox que funciona con ceros y negativos. |
| `step_sqrt()`, `step_inv()` | Otras transformaciones matem√°ticas.                       |



### üßÆ D. Codificaci√≥n de variables categ√≥ricas

| Funci√≥n          | Prop√≥sito                                                   |
| ---------------- | ----------------------------------------------------------- |
| `step_dummy()`   | One-hot encoding (convierte factores a variables binarias). |
| `step_other()`   | Agrupa niveles poco frecuentes en un factor.                |
| `step_unknown()` | A√±ade una categor√≠a "desconocido" para niveles nuevos.      |



### üìä E. Reducci√≥n de dimensionalidad y selecci√≥n 

| Funci√≥n          | Prop√≥sito                                    |
| ---------------- | -------------------------------------------- |
| `step_pca()`     | An√°lisis de componentes principales (PCA).   |
| `step_corr()`    | Elimina variables altamente correlacionadas. |
| `step_nzv()`     | Elimina variables con varianza casi cero.    |
| `step_lincomb()` | Elimina combinaciones lineales exactas.      |



### ‚öôÔ∏è F. Otras funciones √∫tiles

| Funci√≥n                | Prop√≥sito                                                  |
| ---------------------- | ---------------------------------------------------------- |
| `step_interact()`      | Crea t√©rminos de interacci√≥n entre variables.              |
| `step_poly()`          | Crea t√©rminos polinomiales.                                |
| `step_dummy_extract()` | Convierte c√≥digos dummy a factor (inverso de dummy).       |
| `step_mutate()`        | Permite crear nuevas variables (como `mutate` en `dplyr`). |


## üîÑ Flujo t√≠pico con `recipes`

```{r, eval = FALSE}
library(recipes)

rec <- recipe(y ~ ., data = datos) %>%
  step_impute_median(all_predictors()) %>%
  step_normalize(all_numeric_predictors()) %>%
  step_dummy(all_nominal_predictors())

rec_prep <- prep(rec)
datos_listos <- bake(rec_prep, new_data = NULL)
```


